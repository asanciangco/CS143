package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate _jp;
    DbIterator _c1;
    DbIterator _c2;
    Tuple outerPos;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
	// DONE
        _jp = p;
        _c1 = child1;
        _c2 = child2;
        outerPos = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        // DONE
        return _jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        // DONE
        return "Table1." + _c1.getTupleDesc().getFieldName(_jp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        // DONE
        return "Table2." + _c2.getTupleDesc().getFieldName(_jp.getField2());
    }

    public Tuple mergeTuples(Tuple t1, Tuple t2) {
	Tuple nt = new Tuple(getTupleDesc());
		    
	int len1 = t1.getTupleDesc().numFields();
	int len2 = t2.getTupleDesc().numFields();
	
	// The first len1 elements will be from t1...
	for (int i = 0; i < len1; i++)
	    nt.setField(i, t1.getField(i));
	
	// The next len2 elements will be from t2...
	for (int j = 0; j < len2; j++)
	    nt.setField(len1 + j, t2.getField(j));
	
	return nt;
    
    }
    
    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        // DONE
        
        // Get the old TupleDescs 
        TupleDesc td1 = _c1.getTupleDesc();
        TupleDesc td2 = _c2.getTupleDesc();
        
        int len1 = td1.numFields();
        int len2 = td2.numFields();
        
        int f1 = _jp.getField1();
        int f2 = _jp.getField2();
        
        // Arrays that will hold info from both TupleDescs
        Type[]   types = new Type[len1 + len2];
        String[] names = new String[len1 + len2];
        
        // Populate arrays with data from td1 THEN td2
        for (int i = 0; i < len1; i++) {
	    types[i] = td1.getFieldType(i);
	    if (i == f1)
		names[i] = getJoinField1Name();		// update join field name
	    else
		names[i] = td1.getFieldName(i);
        }
        for (int j = 0; j < len2; j++) {
	    types[len1 + j] = td2.getFieldType(j);
	    if (j == f2)
		names[len1 + j] = getJoinField2Name();		// update join field name
	    else
		names[len1 + j] = td2.getFieldName(j);
        }
        
        // Make a new combined TupleDesc and return it
        return new TupleDesc(types, names);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        // DONE
        try {
	    _c1.open();
	    _c2.open();
	    super.open();
	    
	    if (_c1.hasNext()) {
		outerPos = _c1.next();		// Initialize the start of the outer loop
	    }
        } catch (DbException de) {
	    throw new DbException("Error opening join");
        } catch (NoSuchElementException nsee) {
	    throw new NoSuchElementException();
        } catch (TransactionAbortedException tae) {
	    throw new TransactionAbortedException();
        }
    }

    public void close() {
        // some code goes here
        // DONE
        super.close();
        _c2.close();
        _c1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        // DONE
        try {
	    _c1.rewind();
	    _c2.rewind();
	    
	    if (_c1.hasNext()) {
		outerPos = _c1.next();		// Initialize the start of the outer loop
	    }
	    
        } catch (DbException de) {
	    throw new DbException("Error opening join");
        } catch (TransactionAbortedException tae) {
	    throw new TransactionAbortedException();
        }
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        
        if(outerPos == null)
	    return null;

	Tuple innerPos;
	do {
		while (_c2.hasNext()) {
		    innerPos = _c2.next();
		    
		    if(_jp.filter(outerPos, innerPos))
			return mergeTuples(outerPos, innerPos);
		}	
		_c2.rewind();
	} while(_c1.hasNext() && (outerPos = _c1.next()));
	return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        // DONE
        DbIterator[] children = {_c1, _c2};
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        // DONE
        _c1 = children[0];
        _c2 = children[1];
    }

}
