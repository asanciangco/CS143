package simpledb;

import java.io.*;
import java.util.*;

import java.util.concurrent.ConcurrentHashMap;

/**
 * BufferPool manages the reading and writing of pages into memory from
 * disk. Access methods call into it to retrieve pages, and it fetches
 * pages from the appropriate location.
 * <p>
 * The BufferPool is also responsible for locking;  when a transaction fetches
 * a page, BufferPool checks that the transaction has the appropriate
 * locks to read/write the page.
 * 
 * @Threadsafe, all fields are final
 */
public class BufferPool {
    /** Bytes per page, including header. */
    public static final int PAGE_SIZE = 4096;

    private static int pageSize = PAGE_SIZE;
    
    /** Default number of pages passed to the constructor. This is used by
    other classes. BufferPool should use the numPages argument to the
    constructor instead. */
    public static final int DEFAULT_PAGES = 50;

    // max number of cached pages
    private int _pageLimit;
    // tracker of how many pages are currently in the bufferPool. Should really only
    // be used for the lite implementation of Lab1
    private int _numPages;
    private ConcurrentHashMap<PageId, Page> _pool;
    private int _nextEviction;		// Round-robin implementor, will all ways be < _pageLimit
    private int _nextInsert;
    
    /**
     * Creates a BufferPool that caches up to numPages pages.
     *
     * @param numPages maximum number of pages in this buffer pool.
     */
    public BufferPool(int numPages) {
        // some code goes here
        // DONE
        _pageLimit = numPages;
        _pool = new ConcurrentHashMap<PageId, Page>(_pageLimit);
    }
    
    public static int getPageSize() {
      return pageSize;
    }
    
    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void setPageSize(int pageSize) {
    	BufferPool.pageSize = pageSize;
    }

    /**
     * Retrieve the specified page with the associated permissions.
     * Will acquire a lock and may block if that lock is held by another
     * transaction.
     * <p>
     * The retrieved page should be looked up in the buffer pool.  If it
     * is present, it should be returned.  If it is not present, it should
     * be added to the buffer pool and returned.  If there is insufficient
     * space in the buffer pool, an page should be evicted and the new page
     * should be added in its place.
     *
     * @param tid the ID of the transaction requesting the page
     * @param pid the ID of the requested page
     * @param perm the requested permissions on the page
     */
    public  Page getPage(TransactionId tid, PageId pid, Permissions perm)
        throws TransactionAbortedException, DbException {
        // some code goes here
        // DONE
        
        //////////////////////////////
        //// NEED TO REWRITE THIS ////
        //////////////////////////////
        
        Page page = _pool.get(pid);
        if (page != null)
	    return page;			// Simple case, it's in the BufferPool so return it.
        
        // Otherwise if it's not in the pool, see if the pool is full.
        if (_numPages >= _pageLimit) {
	    // evict a page
	    evictPage();
	    _numPages--;
        }
        
        // Read the page from the file, increment pool size
        page = Database.getCatalog().getDatabaseFile(pid.getTableId()).readPage(pid);
        _pool.put(pid, page);
        _numPages++;
        
        return page;
    }

    /**
     * Releases the lock on a page.
     * Calling this is very risky, and may result in wrong behavior. Think hard
     * about who needs to call this and why, and why they can run the risk of
     * calling it.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param pid the ID of the page to unlock
     */
    public  void releasePage(TransactionId tid, PageId pid) {
        // some code goes here
        // not necessary for lab1|lab2
    }

    /**
     * Release all locks associated with a given transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     */
    public void transactionComplete(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
    }

    /** Return true if the specified transaction has a lock on the specified page */
    public boolean holdsLock(TransactionId tid, PageId p) {
        // some code goes here
        // not necessary for lab1|lab2
        return false;
    }

    /**
     * Commit or abort a given transaction; release all locks associated to
     * the transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param commit a flag indicating whether we should commit or abort
     */
    public void transactionComplete(TransactionId tid, boolean commit)
        throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
    }

    /**
     * Add a tuple to the specified table on behalf of transaction tid.  Will
     * acquire a write lock on the page the tuple is added to and any other 
     * pages that are updated (Lock acquisition is not needed for lab2). 
     * May block if the lock(s) cannot be acquired.
     * 
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and updates cached versions of any pages that have 
     * been dirtied so that future requests see up-to-date pages. 
     *
     * @param tid the transaction adding the tuple
     * @param tableId the table to add the tuple to
     * @param t the tuple to add
     */
    public void insertTuple(TransactionId tid, int tableId, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
        // DONE
        try{
	    DbFile file = Database.getCatalog().getDatabaseFile(tableId);
	    ArrayList<Page> modifiedPages = file.insertTuple(tid, t);
	    
	    for(Page p: modifiedPages)
		p.markDirty(true, tid);
    	}
    	catch(DbException d){
	    throw new DbException("Error: BufferPool cannot insert tuple");
    	}
    	catch(IOException i){
	    throw new IOException("");
    	}
    	catch(TransactionAbortedException tran){
	    throw new TransactionAbortedException();
    	}
    }

    /**
     * Remove the specified tuple from the buffer pool.
     * Will acquire a write lock on the page the tuple is removed from and any
     * other pages that are updated. May block if the lock(s) cannot be acquired.
     *
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and updates cached versions of any pages that have 
     * been dirtied so that future requests see up-to-date pages. 
     *
     * @param tid the transaction deleting the tuple.
     * @param t the tuple to delete
     */
    public  void deleteTuple(TransactionId tid, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
        // DONE
         try{
	    int tableId = t.getRecordId().getPageId().getTableId();
	    DbFile file = Database.getCatalog().getDatabaseFile(tableId);
	    ArrayList<Page> modifiedPages = file.deleteTuple(tid, t);
	    
	    for(Page p: modifiedPages)
		p.markDirty(true, tid);
    	}
    	catch(DbException d){
	    throw new DbException("Error: BufferPool Cannot delete tuple " + e);
    	}
    	catch(IOException i){
	    throw new IOException("");
    	}
    	catch(TransactionAbortedException tran){
	    throw new TransactionAbortedException();
    	}
    }

    /**
     * Flush all dirty pages to disk.
     * NB: Be careful using this routine -- it writes dirty data to disk so will
     *     break simpledb if running in NO STEAL mode.
     */
    public synchronized void flushAllPages() throws IOException {
        // some code goes here
        // not necessary for lab1
        // DONE
	
	for (PageId pid : _pool.keySet())
	    flushPage(pid);
    }

    /** Remove the specific page id from the buffer pool.
        Needed by the recovery manager to ensure that the
        buffer pool doesn't keep a rolled back page in its
        cache.
    */
    public synchronized void discardPage(PageId pid) {
        // some code goes here
        // only necessary for lab5
    }

    /**
     * Flushes a certain page to disk
     * @param pid an ID indicating the page to flush
     */
    private synchronized  void flushPage(PageId pid) throws IOException {
        // some code goes here
        // not necessary for lab1
        // DONE
        try {
	    Page page = _pool.get(pid);
	    if (page == null)
		throw new IOException("Error: Null page");
	    
	    // Mark the page as clean then write it back
	    page.markDirty(false, null);
	    DbFile file = Database.getCatalog().getDatabaseFile(pid.getTableId());
	    file.writePage(page);
        } catch(Exception e) {
	    throw new IOException("Error: Could not flush page");
        }
    }

    /** Write all pages of the specified transaction to disk.
     */
    public synchronized  void flushPages(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
    }

    /**
     * Discards a page from the buffer pool.
     * Flushes the page to disk to ensure dirty pages are updated on disk.
     */
    private synchronized  void evictPage() throws DbException {
        // some code goes here
        // not necessary for lab1
        try {
	    PageId pid = _pool.keySet().iterator().next();
	    flushPage(pid);
	    _pool.remove(pid);
	} catch (Exception e) {
	    throw new DbException("Error: Couldn't evict page. " + e);
	}
    }
}
