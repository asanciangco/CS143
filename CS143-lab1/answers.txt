Lab 1 Write Up
  Alex Sanciangco
  704050064
  CS 143

Lab Partner:
  Nick Westman
  
DESIGN DECISIONS:
  Exercise 1:
    Since the iterator for TupleDesc and Tuple was rather simple (just iterated over an array), 
    I created a simple iterator to return. 

    All other functionality of exercise is intuitive. 

  Exercise 2:
    I chose to store the tables in an ArrayList. While performance suffers with this implementation
    versus a hashtable on the tableId, the latter implementation would be highly inefficient for 
    memory in this lab since there are few tables used. Lookups therefore require sequential
    scans.

  Exercise 3:
    Since the pool is so simple and a fixed size in this lab, I implemented it using an array
    of pages. 

  Exercise 4:
    The hash code for HeapTableId was generated by converting the page number and table id into
    strings, concatenating them, then using the String class's built in hash function.

    The hash code for RecordIds is generated in the same fashion as HeapTableIds. 

    The bitmap in the header of HeapPage was implemented using bit-shift operations. The iterator
    was implemented similar to TupleDesc and Tuple.

  Exercise 5:
    The readPage() method was implemented using a BufferedInputStream to read data from the file
    into a byte array, which is in turn used to dynamically create HeapPages from data on disk
    as they are requested. 

    The iterator returned from the HeapFile is created in its own class which utilizes the iterators
    returned from HeapPages, combined with logic to create new iterators on subsequent pages as the
    page-iterators terminate. 

  Exercise 6:
    SeqScan's functionality is nearly identical to that of the iterator returned by HeapFile. Because
    of this, that iterator is containted within SeqScan to implement its functionality. 

CHANGES MADE TO THE API:
  No changes were made to the skeleton code API.

MISSING / INCOMPLETE ELEMENTS OF CODE:
  Project was finished to specification, no elements of code required for lab 1 are missing. All
  tests run successfully on host machine.

TIME / REFLECTIONS ON PROJECT:
  The project probably took about 6-8 man-hours. It was a little slow to start, getting aquainted
  with all the files and how they interact. After getting into it though, it became much easier
  to wrap my head around the design of the database. There were some ambiguities in the spec,
  notably in the open() method of DbFileIterators; it was never really specific exactly what they
  were supposed to do or how they were supposed to work. It wasn't until I dug around the test
  code that I discovered more about their use. 
